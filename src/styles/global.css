@import url("https://fonts.googleapis.com/css2?family=IBM+Plex+Mono:wght@400;700&family=Space+Grotesk:wght@400;700&display=swap");
@import "tailwindcss";
@plugin '@tailwindcss/typography';

@theme {
  /* Neobrutalism palette */
  --color-primary: #ee8a6b;
  /* Coral */
  --color-secondary: #ffd166;
  /* Mustard */
  --color-background: #f9f6ee;
  /* Off-white */
  --color-accent: #2e7d32;
  /* Forest Green */
  --color-blue: #1976d2;
  /* Blue */
  --color-cyan: #aeeeee;
  /* Light Cyan */
  --color-teal: #4ea9a9;
  /* Teal */
  --color-yellow: #f4cc65;
  /* Yellow */
  --color-red: #d14b3a;
  /* Red */
  --color-green: #79b495;
  /* Green */
  --color-light-blue: #629ec6;
  /* Light Blue */

  --shadow-neo: 4px 4px 0px 0px rgba(0, 0, 0, 1);
  --text-shadow-neo:
    6px 6px 0px rgba(0, 0, 0, 1),
    3px 3px 0px rgba(0, 0, 0, 1),
    -3px 3px 0px rgba(0, 0, 0, 1),
    3px -3px 0px rgba(0, 0, 0, 1),
    -3px -3px 0px rgba(0, 0, 0, 1);

  --animate-wobble: wobble 2.4s ease-in-out infinite;

  @keyframes wobble {

    0%,
    100% {
      transform: rotate(-1.5deg) translateY(0) scale(1);
    }

    25% {
      transform: rotate(1deg) translateY(-2px) scale(1.02);
    }

    50% {
      transform: rotate(-0.5deg) translateY(1px) scale(0.995);
    }

    75% {
      transform: rotate(1.5deg) translateY(-1px) scale(1.01);
    }
  }
}

body {
  font-family: "IBM Plex Mono", system-ui, "Noto Color Emoji", monospace;
  background-image: url("data:image/svg+xml,%3Csvg width='20' height='20' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23000000' fill-opacity='0.03' fill-rule='evenodd'%3E%3Ccircle cx='3' cy='3' r='3'/%3E%3Ccircle cx='13' cy='13' r='3'/%3E%3C/g%3E%3C/svg%3E");
}

p {
  font-family: system-ui, "Noto Color Emoji", sans-serif;
}

.astro-code {
  background-color: var(--color-background) !important;
}

.prose code:not(pre code) {
  @apply bg-background px-2 py-1
}

/* Show a compact language pill when pre has a non-plaintext language */
.prose pre[data-language]:not([data-language="plaintext" i]):not([data-language="text" i]):not([data-language="plain" i]):not([data-language="none" i]) {
  @apply relative;
}

.prose pre[data-language]:not([data-language="plaintext" i]):not([data-language="text" i]):not([data-language="plain" i]):not([data-language="none" i])::before {
  content: attr(data-language);
  @apply text-xs font-mono font-black uppercase text-white bg-black absolute top-0 right-0 -translate-x-1 translate-y-1 px-1 py-0.5;
}

@layer utilities {
  .prose blockquote {
    quotes: none;
  }

  .prose blockquote::before {
    content: '';
    position: absolute;
    top: theme(spacing.2);
    left: theme(spacing.2);
    width: theme(spacing.1);
    height: calc(100% - theme(spacing.4));
    background-color: black;
  }

}